{
    "critiques": {
        "680": {
            "rubric_items": {
                "7303": {
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 14. Submission includes heuristic_analysis.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named heuristic_analysis.pdf for review.\n\n\nFailed Test: 15. Submission includes research_review.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named research_review.pdf for review.\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n14. Submission includes heuristic_analysis.pdf:                        F\n15. Submission includes research_review.pdf:                           F\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```",
                    "result": "failed"
                },
                "5510": {
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 2. Test functionality of MinimaxPlayer.minimax()\n----------------------------------------------------------------------\nAssertionError: False is not true : Your MinimaxAgent.minimax function returned a move that was not one of the optimal moves for the given heurisitc. \nAvailable choices:\n[(3, 4), (5, 4)]\nYour Selection:\n(6, 7)\n\nTest Case Details:\n------------------\nHeuristic: open_move_score\nDepth limit: 1\nInitial Board State:\n     0   1   2   3   4   5   6   7   8\n0  |   |   |   |   |   |   |   |   |   | \n1  |   |   |   |   |   |   |   |   |   | \n2  |   |   |   | - | - | - |   |   |   | \n3  |   |   | - | - |   | - | - |   |   | \n4  |   |   |   |   |   |   | 1 |   |   | \n5  |   |   | - | - |   | - | - | 2 |   | \n6  |   |   |   | - | - | - |   |   |   | \n7  |   |   |   |   |   |   |   |   |   | \n8  |   |   |   |   |   |   |   |   |   | \n\ngame._board_state:\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 58]\n\n\n\nFailed Test: 7. Test functionality of AlphaBetaPlayer.alphabeta()\n----------------------------------------------------------------------\nAssertionError: False is not true : Your AlphaBetaAgent.alphabeta function returned a move that was not the optimal move for the given heurisitc. \nExpected Best Move:\n(1, 3)\nYour Selection: (5, 1)\n\nTest Case Details:\n------------------\nHeuristic: open_move_score\nDepth limit: 1\nInitial Board State:\n     0   1   2   3   4   5   6   7   8\n0  |   |   |   |   |   |   |   |   |   | \n1  |   |   |   |   |   |   | - |   |   | \n2  |   |   |   | - | 2 | - |   |   |   | \n3  |   |   | 1 | - |   | - |   | - |   | \n4  |   |   | - | - |   |   | - |   |   | \n5  |   |   | - | - |   |   | - |   |   | \n6  |   |   | - | - | - |   |   |   |   | \n7  |   |   |   |   | - |   |   |   |   | \n8  |   |   |   |   |   |   |   |   |   | \n\ngame._board_state:\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 21]\n\n\n\nFailed Test: 8. Test that alphabeta() raises SearchTimeout when the timer expires\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 447, in alphabeta\n    return self.alphabeta_helper(game, depth, alpha, beta)[0]\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 481, in alphabeta_helper\n    score = self.alphabeta_helper(change_play, depth - 1,alpha,beta)[1]\n\n                     ...lines elided for space...                     \n\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 481, in alphabeta_helper\n    score = self.alphabeta_helper(change_play, depth - 1,alpha,beta)[1]\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 481, in alphabeta_helper\n    score = self.alphabeta_helper(change_play, depth - 1,alpha,beta)[1]\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 481, in alphabeta_helper\n    score = self.alphabeta_helper(change_play, depth - 1,alpha,beta)[1]\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 481, in alphabeta_helper\n    score = self.alphabeta_helper(change_play, depth - 1,alpha,beta)[1]\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 481, in alphabeta_helper\n    score = self.alphabeta_helper(change_play, depth - 1,alpha,beta)[1]\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 481, in alphabeta_helper\n    score = self.alphabeta_helper(change_play, depth - 1,alpha,beta)[1]\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 481, in alphabeta_helper\n    score = self.alphabeta_helper(change_play, depth - 1,alpha,beta)[1]\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 462, in alphabeta_helper\n    return (-1,-1),self.score(game, self)\n  File \"/home/grader/isolation/testcases.py\", line 575, in score\n    \"each call to avoid timeout. {1}\").format(search_name, self.timer())\nRuntimeError: Your alphabeta agent called the score_fn after the timer fell below 0 milliseconds remaining.  If you call any helper functions in your alphabeta search, then you need to check the timer inside each call to avoid timeout. -0.17632500000001983\n\n\nFailed Test: 9. Test iterative deepening in AlphaBetaPlayer.get_move()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 390, in get_move\n    best_move = self.alphabeta(game, depth)\n  File \"/home/grader/isolation/testcases.py\", line 1027, in alphabeta\n    raise game_agent.SearchTimeout\nworkspace.game_agent.SearchTimeout\n\n\nFailed Test: 10. Test that AlphaBetaPlayer successfully plays a full game\n----------------------------------------------------------------------\nTraceback (most recent call last):\nRuntimeError: Timeout: 53.7146ms exceeds 25ms limit\n\nDuring handling of the above exception, another exception occurred:\n\nAssertionError: Your agent raised an error while attempting to play a complete game against another agent.  Make sure that your agent can play an entire game -- including selecting initial moves on an empty board.\nException: Timeout: 53.7146ms exceeds 25ms limit\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n1. Test output interface of MinimaxPlayer.minimax():                   .\n2. Test functionality of MinimaxPlayer.minimax():                      F\n3. Test that minimax() raises SearchTimeout when the timer expires:    .\n4. Test that MinimaxPlayer successfully plays a full game:             .\n5. Test interface of AlphaBetaPlayer.alphabeta():                      .\n6. Test the interface of AlphaBetaPlayer.get_move():                   .\n7. Test functionality of AlphaBetaPlayer.alphabeta():                  F\n8. Test that alphabeta() raises SearchTimeout when the timer expires:  E\n9. Test iterative deepening in AlphaBetaPlayer.get_move():             E\n10. Test that AlphaBetaPlayer successfully plays a full game:          F\n11. Test output interface of custom_score():                           .\n12. Test output interface of custom_score_2():                         .\n13. Test output interface of custom_score_3():                         .\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```",
                    "result": "failed"
                }
            }
        }
    }
}